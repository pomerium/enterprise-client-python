# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pomerium.pb.clusters_pb2 as clusters__pb2


class ClustersServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddCluster = channel.unary_unary(
                '/pomerium.dashboard.ClustersService/AddCluster',
                request_serializer=clusters__pb2.AddClusterRequest.SerializeToString,
                response_deserializer=clusters__pb2.AddClusterResponse.FromString,
                )
        self.DeleteCluster = channel.unary_unary(
                '/pomerium.dashboard.ClustersService/DeleteCluster',
                request_serializer=clusters__pb2.DeleteClusterRequest.SerializeToString,
                response_deserializer=clusters__pb2.DeleteClusterResponse.FromString,
                )
        self.GetCluster = channel.unary_unary(
                '/pomerium.dashboard.ClustersService/GetCluster',
                request_serializer=clusters__pb2.GetClusterRequest.SerializeToString,
                response_deserializer=clusters__pb2.GetClusterResponse.FromString,
                )
        self.ListClusters = channel.unary_unary(
                '/pomerium.dashboard.ClustersService/ListClusters',
                request_serializer=clusters__pb2.ListClustersRequest.SerializeToString,
                response_deserializer=clusters__pb2.ListClustersResponse.FromString,
                )
        self.UpdateCluster = channel.unary_unary(
                '/pomerium.dashboard.ClustersService/UpdateCluster',
                request_serializer=clusters__pb2.UpdateClusterRequest.SerializeToString,
                response_deserializer=clusters__pb2.UpdateClusterResponse.FromString,
                )


class ClustersServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListClusters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClustersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCluster,
                    request_deserializer=clusters__pb2.AddClusterRequest.FromString,
                    response_serializer=clusters__pb2.AddClusterResponse.SerializeToString,
            ),
            'DeleteCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCluster,
                    request_deserializer=clusters__pb2.DeleteClusterRequest.FromString,
                    response_serializer=clusters__pb2.DeleteClusterResponse.SerializeToString,
            ),
            'GetCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCluster,
                    request_deserializer=clusters__pb2.GetClusterRequest.FromString,
                    response_serializer=clusters__pb2.GetClusterResponse.SerializeToString,
            ),
            'ListClusters': grpc.unary_unary_rpc_method_handler(
                    servicer.ListClusters,
                    request_deserializer=clusters__pb2.ListClustersRequest.FromString,
                    response_serializer=clusters__pb2.ListClustersResponse.SerializeToString,
            ),
            'UpdateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCluster,
                    request_deserializer=clusters__pb2.UpdateClusterRequest.FromString,
                    response_serializer=clusters__pb2.UpdateClusterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.ClustersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClustersService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.ClustersService/AddCluster',
            clusters__pb2.AddClusterRequest.SerializeToString,
            clusters__pb2.AddClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.ClustersService/DeleteCluster',
            clusters__pb2.DeleteClusterRequest.SerializeToString,
            clusters__pb2.DeleteClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.ClustersService/GetCluster',
            clusters__pb2.GetClusterRequest.SerializeToString,
            clusters__pb2.GetClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListClusters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.ClustersService/ListClusters',
            clusters__pb2.ListClustersRequest.SerializeToString,
            clusters__pb2.ListClustersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.ClustersService/UpdateCluster',
            clusters__pb2.UpdateClusterRequest.SerializeToString,
            clusters__pb2.UpdateClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
