"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import users_pb2

class UserServiceStub:
    """UserService supports querying directory data from the databroker"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    GetUserInfo: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetUserInfoRequest,
        users_pb2.GetUserInfoResponse] = ...
    """GetUserInfo retrieves identity information and permission mappings for a
    user
    """

    QueryGroups: grpc.UnaryUnaryMultiCallable[
        users_pb2.QueryGroupsRequest,
        users_pb2.QueryGroupsResponse] = ...
    """QueryGroups retrieves groups from the databroker based on
    QueryGroupsRequest parameters
    """

    QueryUsers: grpc.UnaryUnaryMultiCallable[
        users_pb2.QueryUsersRequest,
        users_pb2.QueryUsersResponse] = ...
    """QueryUsers retrieves users from the databroker based on QueryUsersRequest
    parameters
    """


class UserServiceServicer(metaclass=abc.ABCMeta):
    """UserService supports querying directory data from the databroker"""
    @abc.abstractmethod
    def GetUserInfo(self,
        request: users_pb2.GetUserInfoRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.GetUserInfoResponse:
        """GetUserInfo retrieves identity information and permission mappings for a
        user
        """
        pass

    @abc.abstractmethod
    def QueryGroups(self,
        request: users_pb2.QueryGroupsRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.QueryGroupsResponse:
        """QueryGroups retrieves groups from the databroker based on
        QueryGroupsRequest parameters
        """
        pass

    @abc.abstractmethod
    def QueryUsers(self,
        request: users_pb2.QueryUsersRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.QueryUsersResponse:
        """QueryUsers retrieves users from the databroker based on QueryUsersRequest
        parameters
        """
        pass


def add_UserServiceServicer_to_server(servicer: UserServiceServicer, server: grpc.Server) -> None: ...

class PomeriumServiceAccountServiceStub:
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    AddPomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.AddPomeriumServiceAccountRequest,
        users_pb2.AddPomeriumServiceAccountResponse] = ...
    """AddPomeriumServiceAccount creates a new service account"""

    DeletePomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.DeletePomeriumServiceAccountRequest,
        users_pb2.DeletePomeriumServiceAccountResponse] = ...
    """DeletePomeriumServiceAccount removes an existing service account"""

    GetPomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetPomeriumServiceAccountRequest,
        users_pb2.GetPomeriumServiceAccountResponse] = ...
    """GetPomeriumServiceAccount retrieves an existing service account"""

    ListPomeriumServiceAccounts: grpc.UnaryUnaryMultiCallable[
        users_pb2.ListPomeriumServiceAccountsRequest,
        users_pb2.ListPomeriumServiceAccountsResponse] = ...
    """ListPomeriumServiceAccounts lists service accounts based on the parameters
    in ListPomeriumServiceAccountsRequest
    """


class PomeriumServiceAccountServiceServicer(metaclass=abc.ABCMeta):
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """
    @abc.abstractmethod
    def AddPomeriumServiceAccount(self,
        request: users_pb2.AddPomeriumServiceAccountRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.AddPomeriumServiceAccountResponse:
        """AddPomeriumServiceAccount creates a new service account"""
        pass

    @abc.abstractmethod
    def DeletePomeriumServiceAccount(self,
        request: users_pb2.DeletePomeriumServiceAccountRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.DeletePomeriumServiceAccountResponse:
        """DeletePomeriumServiceAccount removes an existing service account"""
        pass

    @abc.abstractmethod
    def GetPomeriumServiceAccount(self,
        request: users_pb2.GetPomeriumServiceAccountRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.GetPomeriumServiceAccountResponse:
        """GetPomeriumServiceAccount retrieves an existing service account"""
        pass

    @abc.abstractmethod
    def ListPomeriumServiceAccounts(self,
        request: users_pb2.ListPomeriumServiceAccountsRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.ListPomeriumServiceAccountsResponse:
        """ListPomeriumServiceAccounts lists service accounts based on the parameters
        in ListPomeriumServiceAccountsRequest
        """
        pass


def add_PomeriumServiceAccountServiceServicer_to_server(servicer: PomeriumServiceAccountServiceServicer, server: grpc.Server) -> None: ...

class PomeriumSessionServiceStub:
    """PomeriumSessionService manages user sessions inside the databroker"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    DeletePomeriumSession: grpc.UnaryUnaryMultiCallable[
        users_pb2.DeletePomeriumSessionRequest,
        users_pb2.DeletePomeriumSessionResponse] = ...
    """DeletePomeriumSession clears an existing user session"""

    GetPomeriumSession: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetPomeriumSessionRequest,
        users_pb2.GetPomeriumSessionResponse] = ...
    """GetPomeriumSession retrieves information about an existing user session"""

    Impersonate: grpc.UnaryUnaryMultiCallable[
        users_pb2.ImpersonateRequest,
        users_pb2.ImpersonateResponse] = ...
    """Impersonate updates an existing session to impersonate another identity"""

    ListPomeriumSessions: grpc.UnaryUnaryMultiCallable[
        users_pb2.ListPomeriumSessionsRequest,
        users_pb2.ListPomeriumSessionsResponse] = ...
    """ListPomeriumSessions lists existing sessions based on the parameters of
    ListPomeriumSessionsRequest
    """


class PomeriumSessionServiceServicer(metaclass=abc.ABCMeta):
    """PomeriumSessionService manages user sessions inside the databroker"""
    @abc.abstractmethod
    def DeletePomeriumSession(self,
        request: users_pb2.DeletePomeriumSessionRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.DeletePomeriumSessionResponse:
        """DeletePomeriumSession clears an existing user session"""
        pass

    @abc.abstractmethod
    def GetPomeriumSession(self,
        request: users_pb2.GetPomeriumSessionRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.GetPomeriumSessionResponse:
        """GetPomeriumSession retrieves information about an existing user session"""
        pass

    @abc.abstractmethod
    def Impersonate(self,
        request: users_pb2.ImpersonateRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.ImpersonateResponse:
        """Impersonate updates an existing session to impersonate another identity"""
        pass

    @abc.abstractmethod
    def ListPomeriumSessions(self,
        request: users_pb2.ListPomeriumSessionsRequest,
        context: grpc.ServicerContext,
    ) -> users_pb2.ListPomeriumSessionsResponse:
        """ListPomeriumSessions lists existing sessions based on the parameters of
        ListPomeriumSessionsRequest
        """
        pass


def add_PomeriumSessionServiceServicer_to_server(servicer: PomeriumSessionServiceServicer, server: grpc.Server) -> None: ...
