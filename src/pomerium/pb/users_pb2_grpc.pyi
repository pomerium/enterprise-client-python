"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import users_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UserServiceStub:
    """UserService supports querying directory data from the databroker"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetGroupInfo: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetGroupInfoRequest,
        users_pb2.GetGroupInfoResponse,
    ]
    """GetGroupInfo retrieves information about a group."""

    GetUserInfo: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetUserInfoRequest,
        users_pb2.GetUserInfoResponse,
    ]
    """GetUserInfo retrieves identity information and permission mappings for a
    user
    """

    QueryGroups: grpc.UnaryUnaryMultiCallable[
        users_pb2.QueryGroupsRequest,
        users_pb2.QueryGroupsResponse,
    ]
    """QueryGroups retrieves groups from the databroker based on
    QueryGroupsRequest parameters
    """

    QueryUsers: grpc.UnaryUnaryMultiCallable[
        users_pb2.QueryUsersRequest,
        users_pb2.QueryUsersResponse,
    ]
    """QueryUsers retrieves users from the databroker based on QueryUsersRequest
    parameters
    """

class UserServiceAsyncStub:
    """UserService supports querying directory data from the databroker"""

    GetGroupInfo: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.GetGroupInfoRequest,
        users_pb2.GetGroupInfoResponse,
    ]
    """GetGroupInfo retrieves information about a group."""

    GetUserInfo: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.GetUserInfoRequest,
        users_pb2.GetUserInfoResponse,
    ]
    """GetUserInfo retrieves identity information and permission mappings for a
    user
    """

    QueryGroups: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.QueryGroupsRequest,
        users_pb2.QueryGroupsResponse,
    ]
    """QueryGroups retrieves groups from the databroker based on
    QueryGroupsRequest parameters
    """

    QueryUsers: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.QueryUsersRequest,
        users_pb2.QueryUsersResponse,
    ]
    """QueryUsers retrieves users from the databroker based on QueryUsersRequest
    parameters
    """

class UserServiceServicer(metaclass=abc.ABCMeta):
    """UserService supports querying directory data from the databroker"""

    @abc.abstractmethod
    def GetGroupInfo(
        self,
        request: users_pb2.GetGroupInfoRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.GetGroupInfoResponse, collections.abc.Awaitable[users_pb2.GetGroupInfoResponse]]:
        """GetGroupInfo retrieves information about a group."""

    @abc.abstractmethod
    def GetUserInfo(
        self,
        request: users_pb2.GetUserInfoRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.GetUserInfoResponse, collections.abc.Awaitable[users_pb2.GetUserInfoResponse]]:
        """GetUserInfo retrieves identity information and permission mappings for a
        user
        """

    @abc.abstractmethod
    def QueryGroups(
        self,
        request: users_pb2.QueryGroupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.QueryGroupsResponse, collections.abc.Awaitable[users_pb2.QueryGroupsResponse]]:
        """QueryGroups retrieves groups from the databroker based on
        QueryGroupsRequest parameters
        """

    @abc.abstractmethod
    def QueryUsers(
        self,
        request: users_pb2.QueryUsersRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.QueryUsersResponse, collections.abc.Awaitable[users_pb2.QueryUsersResponse]]:
        """QueryUsers retrieves users from the databroker based on QueryUsersRequest
        parameters
        """

def add_UserServiceServicer_to_server(servicer: UserServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class PomeriumServiceAccountServiceStub:
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AddPomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.AddPomeriumServiceAccountRequest,
        users_pb2.AddPomeriumServiceAccountResponse,
    ]
    """AddPomeriumServiceAccount creates a new service account"""

    DeletePomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.DeletePomeriumServiceAccountRequest,
        users_pb2.DeletePomeriumServiceAccountResponse,
    ]
    """DeletePomeriumServiceAccount removes an existing service account"""

    GetPomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetPomeriumServiceAccountRequest,
        users_pb2.GetPomeriumServiceAccountResponse,
    ]
    """GetPomeriumServiceAccount retrieves an existing service account"""

    ListPomeriumServiceAccounts: grpc.UnaryUnaryMultiCallable[
        users_pb2.ListPomeriumServiceAccountsRequest,
        users_pb2.ListPomeriumServiceAccountsResponse,
    ]
    """ListPomeriumServiceAccounts lists service accounts based on the parameters
    in ListPomeriumServiceAccountsRequest
    """

    SetPomeriumServiceAccount: grpc.UnaryUnaryMultiCallable[
        users_pb2.SetPomeriumServiceAccountRequest,
        users_pb2.SetPomeriumServiceAccountResponse,
    ]

class PomeriumServiceAccountServiceAsyncStub:
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """

    AddPomeriumServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.AddPomeriumServiceAccountRequest,
        users_pb2.AddPomeriumServiceAccountResponse,
    ]
    """AddPomeriumServiceAccount creates a new service account"""

    DeletePomeriumServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.DeletePomeriumServiceAccountRequest,
        users_pb2.DeletePomeriumServiceAccountResponse,
    ]
    """DeletePomeriumServiceAccount removes an existing service account"""

    GetPomeriumServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.GetPomeriumServiceAccountRequest,
        users_pb2.GetPomeriumServiceAccountResponse,
    ]
    """GetPomeriumServiceAccount retrieves an existing service account"""

    ListPomeriumServiceAccounts: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.ListPomeriumServiceAccountsRequest,
        users_pb2.ListPomeriumServiceAccountsResponse,
    ]
    """ListPomeriumServiceAccounts lists service accounts based on the parameters
    in ListPomeriumServiceAccountsRequest
    """

    SetPomeriumServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.SetPomeriumServiceAccountRequest,
        users_pb2.SetPomeriumServiceAccountResponse,
    ]

class PomeriumServiceAccountServiceServicer(metaclass=abc.ABCMeta):
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """

    @abc.abstractmethod
    def AddPomeriumServiceAccount(
        self,
        request: users_pb2.AddPomeriumServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.AddPomeriumServiceAccountResponse, collections.abc.Awaitable[users_pb2.AddPomeriumServiceAccountResponse]]:
        """AddPomeriumServiceAccount creates a new service account"""

    @abc.abstractmethod
    def DeletePomeriumServiceAccount(
        self,
        request: users_pb2.DeletePomeriumServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.DeletePomeriumServiceAccountResponse, collections.abc.Awaitable[users_pb2.DeletePomeriumServiceAccountResponse]]:
        """DeletePomeriumServiceAccount removes an existing service account"""

    @abc.abstractmethod
    def GetPomeriumServiceAccount(
        self,
        request: users_pb2.GetPomeriumServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.GetPomeriumServiceAccountResponse, collections.abc.Awaitable[users_pb2.GetPomeriumServiceAccountResponse]]:
        """GetPomeriumServiceAccount retrieves an existing service account"""

    @abc.abstractmethod
    def ListPomeriumServiceAccounts(
        self,
        request: users_pb2.ListPomeriumServiceAccountsRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.ListPomeriumServiceAccountsResponse, collections.abc.Awaitable[users_pb2.ListPomeriumServiceAccountsResponse]]:
        """ListPomeriumServiceAccounts lists service accounts based on the parameters
        in ListPomeriumServiceAccountsRequest
        """

    @abc.abstractmethod
    def SetPomeriumServiceAccount(
        self,
        request: users_pb2.SetPomeriumServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.SetPomeriumServiceAccountResponse, collections.abc.Awaitable[users_pb2.SetPomeriumServiceAccountResponse]]: ...

def add_PomeriumServiceAccountServiceServicer_to_server(servicer: PomeriumServiceAccountServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class PomeriumSessionServiceStub:
    """PomeriumSessionService manages user sessions inside the databroker"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    DeletePomeriumSession: grpc.UnaryUnaryMultiCallable[
        users_pb2.DeletePomeriumSessionRequest,
        users_pb2.DeletePomeriumSessionResponse,
    ]
    """DeletePomeriumSession clears an existing user session"""

    GetPomeriumSession: grpc.UnaryUnaryMultiCallable[
        users_pb2.GetPomeriumSessionRequest,
        users_pb2.GetPomeriumSessionResponse,
    ]
    """GetPomeriumSession retrieves information about an existing user session"""

    Impersonate: grpc.UnaryUnaryMultiCallable[
        users_pb2.ImpersonateRequest,
        users_pb2.ImpersonateResponse,
    ]
    """Impersonate updates an existing session to impersonate another identity"""

    ListPomeriumSessions: grpc.UnaryUnaryMultiCallable[
        users_pb2.ListPomeriumSessionsRequest,
        users_pb2.ListPomeriumSessionsResponse,
    ]
    """ListPomeriumSessions lists existing sessions based on the parameters of
    ListPomeriumSessionsRequest
    """

class PomeriumSessionServiceAsyncStub:
    """PomeriumSessionService manages user sessions inside the databroker"""

    DeletePomeriumSession: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.DeletePomeriumSessionRequest,
        users_pb2.DeletePomeriumSessionResponse,
    ]
    """DeletePomeriumSession clears an existing user session"""

    GetPomeriumSession: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.GetPomeriumSessionRequest,
        users_pb2.GetPomeriumSessionResponse,
    ]
    """GetPomeriumSession retrieves information about an existing user session"""

    Impersonate: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.ImpersonateRequest,
        users_pb2.ImpersonateResponse,
    ]
    """Impersonate updates an existing session to impersonate another identity"""

    ListPomeriumSessions: grpc.aio.UnaryUnaryMultiCallable[
        users_pb2.ListPomeriumSessionsRequest,
        users_pb2.ListPomeriumSessionsResponse,
    ]
    """ListPomeriumSessions lists existing sessions based on the parameters of
    ListPomeriumSessionsRequest
    """

class PomeriumSessionServiceServicer(metaclass=abc.ABCMeta):
    """PomeriumSessionService manages user sessions inside the databroker"""

    @abc.abstractmethod
    def DeletePomeriumSession(
        self,
        request: users_pb2.DeletePomeriumSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.DeletePomeriumSessionResponse, collections.abc.Awaitable[users_pb2.DeletePomeriumSessionResponse]]:
        """DeletePomeriumSession clears an existing user session"""

    @abc.abstractmethod
    def GetPomeriumSession(
        self,
        request: users_pb2.GetPomeriumSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.GetPomeriumSessionResponse, collections.abc.Awaitable[users_pb2.GetPomeriumSessionResponse]]:
        """GetPomeriumSession retrieves information about an existing user session"""

    @abc.abstractmethod
    def Impersonate(
        self,
        request: users_pb2.ImpersonateRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.ImpersonateResponse, collections.abc.Awaitable[users_pb2.ImpersonateResponse]]:
        """Impersonate updates an existing session to impersonate another identity"""

    @abc.abstractmethod
    def ListPomeriumSessions(
        self,
        request: users_pb2.ListPomeriumSessionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[users_pb2.ListPomeriumSessionsResponse, collections.abc.Awaitable[users_pb2.ListPomeriumSessionsResponse]]:
        """ListPomeriumSessions lists existing sessions based on the parameters of
        ListPomeriumSessionsRequest
        """

def add_PomeriumSessionServiceServicer_to_server(servicer: PomeriumSessionServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
