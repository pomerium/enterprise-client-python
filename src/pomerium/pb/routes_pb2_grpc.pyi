"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import routes_pb2

class RouteServiceStub:
    """RouteService manages proxy route definitions"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    DeleteRoute: grpc.UnaryUnaryMultiCallable[
        routes_pb2.DeleteRouteRequest,
        routes_pb2.DeleteRouteResponse] = ...
    """DeleteRoute removes an existing route"""

    GetRoute: grpc.UnaryUnaryMultiCallable[
        routes_pb2.GetRouteRequest,
        routes_pb2.GetRouteResponse] = ...
    """GetRoute retrieves an existing route"""

    ListRoutes: grpc.UnaryUnaryMultiCallable[
        routes_pb2.ListRoutesRequest,
        routes_pb2.ListRoutesResponse] = ...
    """ListRoutes lists routes based on ListRoutesRequest"""

    LoadRoutes: grpc.UnaryUnaryMultiCallable[
        routes_pb2.LoadRoutesRequest,
        routes_pb2.LoadRoutesResponse] = ...
    """LoadRoutes imports routes from an existing OSS configuration"""

    SetRoute: grpc.UnaryUnaryMultiCallable[
        routes_pb2.SetRouteRequest,
        routes_pb2.SetRouteResponse] = ...
    """SetRoute creates or, if id is defined, updates an existing route"""

    MoveRoutes: grpc.UnaryUnaryMultiCallable[
        routes_pb2.MoveRoutesRequest,
        routes_pb2.MoveRoutesResponse] = ...
    """MoveRoutes takes an array of routeIds and moves them to a new namespace"""


class RouteServiceServicer(metaclass=abc.ABCMeta):
    """RouteService manages proxy route definitions"""
    @abc.abstractmethod
    def DeleteRoute(self,
        request: routes_pb2.DeleteRouteRequest,
        context: grpc.ServicerContext,
    ) -> routes_pb2.DeleteRouteResponse:
        """DeleteRoute removes an existing route"""
        pass

    @abc.abstractmethod
    def GetRoute(self,
        request: routes_pb2.GetRouteRequest,
        context: grpc.ServicerContext,
    ) -> routes_pb2.GetRouteResponse:
        """GetRoute retrieves an existing route"""
        pass

    @abc.abstractmethod
    def ListRoutes(self,
        request: routes_pb2.ListRoutesRequest,
        context: grpc.ServicerContext,
    ) -> routes_pb2.ListRoutesResponse:
        """ListRoutes lists routes based on ListRoutesRequest"""
        pass

    @abc.abstractmethod
    def LoadRoutes(self,
        request: routes_pb2.LoadRoutesRequest,
        context: grpc.ServicerContext,
    ) -> routes_pb2.LoadRoutesResponse:
        """LoadRoutes imports routes from an existing OSS configuration"""
        pass

    @abc.abstractmethod
    def SetRoute(self,
        request: routes_pb2.SetRouteRequest,
        context: grpc.ServicerContext,
    ) -> routes_pb2.SetRouteResponse:
        """SetRoute creates or, if id is defined, updates an existing route"""
        pass

    @abc.abstractmethod
    def MoveRoutes(self,
        request: routes_pb2.MoveRoutesRequest,
        context: grpc.ServicerContext,
    ) -> routes_pb2.MoveRoutesResponse:
        """MoveRoutes takes an array of routeIds and moves them to a new namespace"""
        pass


def add_RouteServiceServicer_to_server(servicer: RouteServiceServicer, server: grpc.Server) -> None: ...
