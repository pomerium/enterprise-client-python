# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: tsdb.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import google.protobuf.duration_pb2
import validate.validate_pb2
import tsdb_pb2


class TimeSeriesDBBase(abc.ABC):

    @abc.abstractmethod
    async def GetRouteMetricChange(self, stream: 'grpclib.server.Stream[tsdb_pb2.RouteMetricChangeRequest, tsdb_pb2.Scalar]') -> None:
        pass

    @abc.abstractmethod
    async def GetRouteMetricChangeHistogram(self, stream: 'grpclib.server.Stream[tsdb_pb2.RouteMetricChangeRequest, tsdb_pb2.ScalarBuckets]') -> None:
        pass

    @abc.abstractmethod
    async def GetRouteMetricSeries(self, stream: 'grpclib.server.Stream[tsdb_pb2.RouteMetricSeriesRequest, tsdb_pb2.TimeSeriesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetRouteMetricSeriesHistogram(self, stream: 'grpclib.server.Stream[tsdb_pb2.RouteMetricSeriesHistogramRequest, tsdb_pb2.TimeSeriesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetRouteMetricSeriesMulti(self, stream: 'grpclib.server.Stream[tsdb_pb2.RouteMetricSeriesRequest, tsdb_pb2.TimeSeriesResponseMulti]') -> None:
        pass

    @abc.abstractmethod
    async def GetUptime(self, stream: 'grpclib.server.Stream[tsdb_pb2.UptimeRequest, tsdb_pb2.UptimeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetInstances(self, stream: 'grpclib.server.Stream[tsdb_pb2.GetInstancesRequest, tsdb_pb2.Instances]') -> None:
        pass

    @abc.abstractmethod
    async def GetServerMetricSeries(self, stream: 'grpclib.server.Stream[tsdb_pb2.ServerMetricSeriesRequest, tsdb_pb2.TimeSeriesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetServerMetric(self, stream: 'grpclib.server.Stream[tsdb_pb2.ServerMetricRequest, tsdb_pb2.Sample]') -> None:
        pass

    @abc.abstractmethod
    async def GetStatus(self, stream: 'grpclib.server.Stream[tsdb_pb2.GetStatusRequest, tsdb_pb2.GetStatusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetLastError(self, stream: 'grpclib.server.Stream[tsdb_pb2.LastErrorRequest, tsdb_pb2.LastErrorResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetUsageReport(self, stream: 'grpclib.server.Stream[tsdb_pb2.UsageReportRequest, tsdb_pb2.UsageReportResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChange': grpclib.const.Handler(
                self.GetRouteMetricChange,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.RouteMetricChangeRequest,
                tsdb_pb2.Scalar,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChangeHistogram': grpclib.const.Handler(
                self.GetRouteMetricChangeHistogram,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.RouteMetricChangeRequest,
                tsdb_pb2.ScalarBuckets,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeries': grpclib.const.Handler(
                self.GetRouteMetricSeries,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.RouteMetricSeriesRequest,
                tsdb_pb2.TimeSeriesResponse,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesHistogram': grpclib.const.Handler(
                self.GetRouteMetricSeriesHistogram,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.RouteMetricSeriesHistogramRequest,
                tsdb_pb2.TimeSeriesResponse,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesMulti': grpclib.const.Handler(
                self.GetRouteMetricSeriesMulti,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.RouteMetricSeriesRequest,
                tsdb_pb2.TimeSeriesResponseMulti,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetUptime': grpclib.const.Handler(
                self.GetUptime,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.UptimeRequest,
                tsdb_pb2.UptimeResponse,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetInstances': grpclib.const.Handler(
                self.GetInstances,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.GetInstancesRequest,
                tsdb_pb2.Instances,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetServerMetricSeries': grpclib.const.Handler(
                self.GetServerMetricSeries,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.ServerMetricSeriesRequest,
                tsdb_pb2.TimeSeriesResponse,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetServerMetric': grpclib.const.Handler(
                self.GetServerMetric,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.ServerMetricRequest,
                tsdb_pb2.Sample,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetStatus': grpclib.const.Handler(
                self.GetStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.GetStatusRequest,
                tsdb_pb2.GetStatusResponse,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetLastError': grpclib.const.Handler(
                self.GetLastError,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.LastErrorRequest,
                tsdb_pb2.LastErrorResponse,
            ),
            '/pomerium.dashboard.TimeSeriesDB/GetUsageReport': grpclib.const.Handler(
                self.GetUsageReport,
                grpclib.const.Cardinality.UNARY_UNARY,
                tsdb_pb2.UsageReportRequest,
                tsdb_pb2.UsageReportResponse,
            ),
        }


class TimeSeriesDBStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetRouteMetricChange = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChange',
            tsdb_pb2.RouteMetricChangeRequest,
            tsdb_pb2.Scalar,
        )
        self.GetRouteMetricChangeHistogram = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChangeHistogram',
            tsdb_pb2.RouteMetricChangeRequest,
            tsdb_pb2.ScalarBuckets,
        )
        self.GetRouteMetricSeries = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeries',
            tsdb_pb2.RouteMetricSeriesRequest,
            tsdb_pb2.TimeSeriesResponse,
        )
        self.GetRouteMetricSeriesHistogram = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesHistogram',
            tsdb_pb2.RouteMetricSeriesHistogramRequest,
            tsdb_pb2.TimeSeriesResponse,
        )
        self.GetRouteMetricSeriesMulti = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesMulti',
            tsdb_pb2.RouteMetricSeriesRequest,
            tsdb_pb2.TimeSeriesResponseMulti,
        )
        self.GetUptime = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetUptime',
            tsdb_pb2.UptimeRequest,
            tsdb_pb2.UptimeResponse,
        )
        self.GetInstances = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetInstances',
            tsdb_pb2.GetInstancesRequest,
            tsdb_pb2.Instances,
        )
        self.GetServerMetricSeries = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetServerMetricSeries',
            tsdb_pb2.ServerMetricSeriesRequest,
            tsdb_pb2.TimeSeriesResponse,
        )
        self.GetServerMetric = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetServerMetric',
            tsdb_pb2.ServerMetricRequest,
            tsdb_pb2.Sample,
        )
        self.GetStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetStatus',
            tsdb_pb2.GetStatusRequest,
            tsdb_pb2.GetStatusResponse,
        )
        self.GetLastError = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetLastError',
            tsdb_pb2.LastErrorRequest,
            tsdb_pb2.LastErrorResponse,
        )
        self.GetUsageReport = grpclib.client.UnaryUnaryMethod(
            channel,
            '/pomerium.dashboard.TimeSeriesDB/GetUsageReport',
            tsdb_pb2.UsageReportRequest,
            tsdb_pb2.UsageReportResponse,
        )
