# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pomerium.pb.users_pb2 as users__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in users_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserServiceStub(object):
    """UserService supports querying directory data from the databroker
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserInfo = channel.unary_unary(
                '/pomerium.dashboard.UserService/GetUserInfo',
                request_serializer=users__pb2.GetUserInfoRequest.SerializeToString,
                response_deserializer=users__pb2.GetUserInfoResponse.FromString,
                _registered_method=True)
        self.QueryGroups = channel.unary_unary(
                '/pomerium.dashboard.UserService/QueryGroups',
                request_serializer=users__pb2.QueryGroupsRequest.SerializeToString,
                response_deserializer=users__pb2.QueryGroupsResponse.FromString,
                _registered_method=True)
        self.QueryUsers = channel.unary_unary(
                '/pomerium.dashboard.UserService/QueryUsers',
                request_serializer=users__pb2.QueryUsersRequest.SerializeToString,
                response_deserializer=users__pb2.QueryUsersResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """UserService supports querying directory data from the databroker
    """

    def GetUserInfo(self, request, context):
        """GetUserInfo retrieves identity information and permission mappings for a
        user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryGroups(self, request, context):
        """QueryGroups retrieves groups from the databroker based on
        QueryGroupsRequest parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryUsers(self, request, context):
        """QueryUsers retrieves users from the databroker based on QueryUsersRequest
        parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfo,
                    request_deserializer=users__pb2.GetUserInfoRequest.FromString,
                    response_serializer=users__pb2.GetUserInfoResponse.SerializeToString,
            ),
            'QueryGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryGroups,
                    request_deserializer=users__pb2.QueryGroupsRequest.FromString,
                    response_serializer=users__pb2.QueryGroupsResponse.SerializeToString,
            ),
            'QueryUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryUsers,
                    request_deserializer=users__pb2.QueryUsersRequest.FromString,
                    response_serializer=users__pb2.QueryUsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pomerium.dashboard.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """UserService supports querying directory data from the databroker
    """

    @staticmethod
    def GetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.UserService/GetUserInfo',
            users__pb2.GetUserInfoRequest.SerializeToString,
            users__pb2.GetUserInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.UserService/QueryGroups',
            users__pb2.QueryGroupsRequest.SerializeToString,
            users__pb2.QueryGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.UserService/QueryUsers',
            users__pb2.QueryUsersRequest.SerializeToString,
            users__pb2.QueryUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PomeriumServiceAccountServiceStub(object):
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddPomeriumServiceAccount = channel.unary_unary(
                '/pomerium.dashboard.PomeriumServiceAccountService/AddPomeriumServiceAccount',
                request_serializer=users__pb2.AddPomeriumServiceAccountRequest.SerializeToString,
                response_deserializer=users__pb2.AddPomeriumServiceAccountResponse.FromString,
                _registered_method=True)
        self.DeletePomeriumServiceAccount = channel.unary_unary(
                '/pomerium.dashboard.PomeriumServiceAccountService/DeletePomeriumServiceAccount',
                request_serializer=users__pb2.DeletePomeriumServiceAccountRequest.SerializeToString,
                response_deserializer=users__pb2.DeletePomeriumServiceAccountResponse.FromString,
                _registered_method=True)
        self.GetPomeriumServiceAccount = channel.unary_unary(
                '/pomerium.dashboard.PomeriumServiceAccountService/GetPomeriumServiceAccount',
                request_serializer=users__pb2.GetPomeriumServiceAccountRequest.SerializeToString,
                response_deserializer=users__pb2.GetPomeriumServiceAccountResponse.FromString,
                _registered_method=True)
        self.ListPomeriumServiceAccounts = channel.unary_unary(
                '/pomerium.dashboard.PomeriumServiceAccountService/ListPomeriumServiceAccounts',
                request_serializer=users__pb2.ListPomeriumServiceAccountsRequest.SerializeToString,
                response_deserializer=users__pb2.ListPomeriumServiceAccountsResponse.FromString,
                _registered_method=True)
        self.SetPomeriumServiceAccount = channel.unary_unary(
                '/pomerium.dashboard.PomeriumServiceAccountService/SetPomeriumServiceAccount',
                request_serializer=users__pb2.SetPomeriumServiceAccountRequest.SerializeToString,
                response_deserializer=users__pb2.SetPomeriumServiceAccountResponse.FromString,
                _registered_method=True)


class PomeriumServiceAccountServiceServicer(object):
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """

    def AddPomeriumServiceAccount(self, request, context):
        """AddPomeriumServiceAccount creates a new service account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePomeriumServiceAccount(self, request, context):
        """DeletePomeriumServiceAccount removes an existing service account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPomeriumServiceAccount(self, request, context):
        """GetPomeriumServiceAccount retrieves an existing service account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPomeriumServiceAccounts(self, request, context):
        """ListPomeriumServiceAccounts lists service accounts based on the parameters
        in ListPomeriumServiceAccountsRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPomeriumServiceAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PomeriumServiceAccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddPomeriumServiceAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPomeriumServiceAccount,
                    request_deserializer=users__pb2.AddPomeriumServiceAccountRequest.FromString,
                    response_serializer=users__pb2.AddPomeriumServiceAccountResponse.SerializeToString,
            ),
            'DeletePomeriumServiceAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePomeriumServiceAccount,
                    request_deserializer=users__pb2.DeletePomeriumServiceAccountRequest.FromString,
                    response_serializer=users__pb2.DeletePomeriumServiceAccountResponse.SerializeToString,
            ),
            'GetPomeriumServiceAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPomeriumServiceAccount,
                    request_deserializer=users__pb2.GetPomeriumServiceAccountRequest.FromString,
                    response_serializer=users__pb2.GetPomeriumServiceAccountResponse.SerializeToString,
            ),
            'ListPomeriumServiceAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPomeriumServiceAccounts,
                    request_deserializer=users__pb2.ListPomeriumServiceAccountsRequest.FromString,
                    response_serializer=users__pb2.ListPomeriumServiceAccountsResponse.SerializeToString,
            ),
            'SetPomeriumServiceAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPomeriumServiceAccount,
                    request_deserializer=users__pb2.SetPomeriumServiceAccountRequest.FromString,
                    response_serializer=users__pb2.SetPomeriumServiceAccountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.PomeriumServiceAccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pomerium.dashboard.PomeriumServiceAccountService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PomeriumServiceAccountService(object):
    """PomeriumServiceAccountService manages service accounts for use with the
    pomerium console API
    """

    @staticmethod
    def AddPomeriumServiceAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumServiceAccountService/AddPomeriumServiceAccount',
            users__pb2.AddPomeriumServiceAccountRequest.SerializeToString,
            users__pb2.AddPomeriumServiceAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePomeriumServiceAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumServiceAccountService/DeletePomeriumServiceAccount',
            users__pb2.DeletePomeriumServiceAccountRequest.SerializeToString,
            users__pb2.DeletePomeriumServiceAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPomeriumServiceAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumServiceAccountService/GetPomeriumServiceAccount',
            users__pb2.GetPomeriumServiceAccountRequest.SerializeToString,
            users__pb2.GetPomeriumServiceAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPomeriumServiceAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumServiceAccountService/ListPomeriumServiceAccounts',
            users__pb2.ListPomeriumServiceAccountsRequest.SerializeToString,
            users__pb2.ListPomeriumServiceAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPomeriumServiceAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumServiceAccountService/SetPomeriumServiceAccount',
            users__pb2.SetPomeriumServiceAccountRequest.SerializeToString,
            users__pb2.SetPomeriumServiceAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PomeriumSessionServiceStub(object):
    """PomeriumSessionService manages user sessions inside the databroker
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeletePomeriumSession = channel.unary_unary(
                '/pomerium.dashboard.PomeriumSessionService/DeletePomeriumSession',
                request_serializer=users__pb2.DeletePomeriumSessionRequest.SerializeToString,
                response_deserializer=users__pb2.DeletePomeriumSessionResponse.FromString,
                _registered_method=True)
        self.GetPomeriumSession = channel.unary_unary(
                '/pomerium.dashboard.PomeriumSessionService/GetPomeriumSession',
                request_serializer=users__pb2.GetPomeriumSessionRequest.SerializeToString,
                response_deserializer=users__pb2.GetPomeriumSessionResponse.FromString,
                _registered_method=True)
        self.Impersonate = channel.unary_unary(
                '/pomerium.dashboard.PomeriumSessionService/Impersonate',
                request_serializer=users__pb2.ImpersonateRequest.SerializeToString,
                response_deserializer=users__pb2.ImpersonateResponse.FromString,
                _registered_method=True)
        self.ListPomeriumSessions = channel.unary_unary(
                '/pomerium.dashboard.PomeriumSessionService/ListPomeriumSessions',
                request_serializer=users__pb2.ListPomeriumSessionsRequest.SerializeToString,
                response_deserializer=users__pb2.ListPomeriumSessionsResponse.FromString,
                _registered_method=True)


class PomeriumSessionServiceServicer(object):
    """PomeriumSessionService manages user sessions inside the databroker
    """

    def DeletePomeriumSession(self, request, context):
        """DeletePomeriumSession clears an existing user session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPomeriumSession(self, request, context):
        """GetPomeriumSession retrieves information about an existing user session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Impersonate(self, request, context):
        """Impersonate updates an existing session to impersonate another identity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPomeriumSessions(self, request, context):
        """ListPomeriumSessions lists existing sessions based on the parameters of
        ListPomeriumSessionsRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PomeriumSessionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeletePomeriumSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePomeriumSession,
                    request_deserializer=users__pb2.DeletePomeriumSessionRequest.FromString,
                    response_serializer=users__pb2.DeletePomeriumSessionResponse.SerializeToString,
            ),
            'GetPomeriumSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPomeriumSession,
                    request_deserializer=users__pb2.GetPomeriumSessionRequest.FromString,
                    response_serializer=users__pb2.GetPomeriumSessionResponse.SerializeToString,
            ),
            'Impersonate': grpc.unary_unary_rpc_method_handler(
                    servicer.Impersonate,
                    request_deserializer=users__pb2.ImpersonateRequest.FromString,
                    response_serializer=users__pb2.ImpersonateResponse.SerializeToString,
            ),
            'ListPomeriumSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPomeriumSessions,
                    request_deserializer=users__pb2.ListPomeriumSessionsRequest.FromString,
                    response_serializer=users__pb2.ListPomeriumSessionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.PomeriumSessionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pomerium.dashboard.PomeriumSessionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PomeriumSessionService(object):
    """PomeriumSessionService manages user sessions inside the databroker
    """

    @staticmethod
    def DeletePomeriumSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumSessionService/DeletePomeriumSession',
            users__pb2.DeletePomeriumSessionRequest.SerializeToString,
            users__pb2.DeletePomeriumSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPomeriumSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumSessionService/GetPomeriumSession',
            users__pb2.GetPomeriumSessionRequest.SerializeToString,
            users__pb2.GetPomeriumSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Impersonate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumSessionService/Impersonate',
            users__pb2.ImpersonateRequest.SerializeToString,
            users__pb2.ImpersonateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPomeriumSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PomeriumSessionService/ListPomeriumSessions',
            users__pb2.ListPomeriumSessionsRequest.SerializeToString,
            users__pb2.ListPomeriumSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
