"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import settings_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SettingsServiceStub:
    """SettingsService manages global pomerium settings"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetSettings: grpc.UnaryUnaryMultiCallable[
        settings_pb2.GetSettingsRequest,
        settings_pb2.GetSettingsResponse,
    ]
    """GetSettings retrieves the currently applied settings"""

    SetSettings: grpc.UnaryUnaryMultiCallable[
        settings_pb2.SetSettingsRequest,
        settings_pb2.SetSettingsResponse,
    ]
    """SetSettings applies new global settings"""

    GetBrandingSettings: grpc.UnaryUnaryMultiCallable[
        settings_pb2.GetSettingsRequest,
        settings_pb2.GetSettingsResponse,
    ]
    """GetBrandingSettings retrieves just the branding part of the settings"""

    GetConsoleSettings: grpc.UnaryUnaryMultiCallable[
        settings_pb2.GetConsoleSettingsRequest,
        settings_pb2.GetConsoleSettingsResponse,
    ]
    """GetConsoleSettings retrieves the console settings."""

class SettingsServiceAsyncStub:
    """SettingsService manages global pomerium settings"""

    GetSettings: grpc.aio.UnaryUnaryMultiCallable[
        settings_pb2.GetSettingsRequest,
        settings_pb2.GetSettingsResponse,
    ]
    """GetSettings retrieves the currently applied settings"""

    SetSettings: grpc.aio.UnaryUnaryMultiCallable[
        settings_pb2.SetSettingsRequest,
        settings_pb2.SetSettingsResponse,
    ]
    """SetSettings applies new global settings"""

    GetBrandingSettings: grpc.aio.UnaryUnaryMultiCallable[
        settings_pb2.GetSettingsRequest,
        settings_pb2.GetSettingsResponse,
    ]
    """GetBrandingSettings retrieves just the branding part of the settings"""

    GetConsoleSettings: grpc.aio.UnaryUnaryMultiCallable[
        settings_pb2.GetConsoleSettingsRequest,
        settings_pb2.GetConsoleSettingsResponse,
    ]
    """GetConsoleSettings retrieves the console settings."""

class SettingsServiceServicer(metaclass=abc.ABCMeta):
    """SettingsService manages global pomerium settings"""

    @abc.abstractmethod
    def GetSettings(
        self,
        request: settings_pb2.GetSettingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[settings_pb2.GetSettingsResponse, collections.abc.Awaitable[settings_pb2.GetSettingsResponse]]:
        """GetSettings retrieves the currently applied settings"""

    @abc.abstractmethod
    def SetSettings(
        self,
        request: settings_pb2.SetSettingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[settings_pb2.SetSettingsResponse, collections.abc.Awaitable[settings_pb2.SetSettingsResponse]]:
        """SetSettings applies new global settings"""

    @abc.abstractmethod
    def GetBrandingSettings(
        self,
        request: settings_pb2.GetSettingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[settings_pb2.GetSettingsResponse, collections.abc.Awaitable[settings_pb2.GetSettingsResponse]]:
        """GetBrandingSettings retrieves just the branding part of the settings"""

    @abc.abstractmethod
    def GetConsoleSettings(
        self,
        request: settings_pb2.GetConsoleSettingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[settings_pb2.GetConsoleSettingsResponse, collections.abc.Awaitable[settings_pb2.GetConsoleSettingsResponse]]:
        """GetConsoleSettings retrieves the console settings."""

def add_SettingsServiceServicer_to_server(servicer: SettingsServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
