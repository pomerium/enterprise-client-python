# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pomerium.pb.key_chain_pb2 as key__chain__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in key_chain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KeyChainServiceStub(object):
    """KeyChainService manages and store TLS Certificates, Keys and CAs, known as
    Key Pairs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeleteKeyPair = channel.unary_unary(
                '/pomerium.dashboard.KeyChainService/DeleteKeyPair',
                request_serializer=key__chain__pb2.DeleteKeyPairRequest.SerializeToString,
                response_deserializer=key__chain__pb2.DeleteKeyPairResponse.FromString,
                _registered_method=True)
        self.GetKeyPair = channel.unary_unary(
                '/pomerium.dashboard.KeyChainService/GetKeyPair',
                request_serializer=key__chain__pb2.GetKeyPairRequest.SerializeToString,
                response_deserializer=key__chain__pb2.GetKeyPairResponse.FromString,
                _registered_method=True)
        self.ListKeyPairs = channel.unary_unary(
                '/pomerium.dashboard.KeyChainService/ListKeyPairs',
                request_serializer=key__chain__pb2.ListKeyPairsRequest.SerializeToString,
                response_deserializer=key__chain__pb2.ListKeyPairsResponse.FromString,
                _registered_method=True)
        self.CreateKeyPair = channel.unary_unary(
                '/pomerium.dashboard.KeyChainService/CreateKeyPair',
                request_serializer=key__chain__pb2.CreateKeyPairRequest.SerializeToString,
                response_deserializer=key__chain__pb2.CreateKeyPairResponse.FromString,
                _registered_method=True)
        self.UpdateKeyPair = channel.unary_unary(
                '/pomerium.dashboard.KeyChainService/UpdateKeyPair',
                request_serializer=key__chain__pb2.UpdateKeyPairRequest.SerializeToString,
                response_deserializer=key__chain__pb2.UpdateKeyPairResponse.FromString,
                _registered_method=True)


class KeyChainServiceServicer(object):
    """KeyChainService manages and store TLS Certificates, Keys and CAs, known as
    Key Pairs
    """

    def DeleteKeyPair(self, request, context):
        """DeleteKeyPair remove an x509 key pair based on a DeleteKeyPairRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeyPair(self, request, context):
        """GetKeyPair retrieves an existing key pair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListKeyPairs(self, request, context):
        """ListKeyPairs lists existing key pairs based on parameters in
        ListKeyPairsRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKeyPair(self, request, context):
        """CreateKeyPair creates a new key pair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKeyPair(self, request, context):
        """CreateKeyPair creates a new key pair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyChainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeleteKeyPair': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKeyPair,
                    request_deserializer=key__chain__pb2.DeleteKeyPairRequest.FromString,
                    response_serializer=key__chain__pb2.DeleteKeyPairResponse.SerializeToString,
            ),
            'GetKeyPair': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeyPair,
                    request_deserializer=key__chain__pb2.GetKeyPairRequest.FromString,
                    response_serializer=key__chain__pb2.GetKeyPairResponse.SerializeToString,
            ),
            'ListKeyPairs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKeyPairs,
                    request_deserializer=key__chain__pb2.ListKeyPairsRequest.FromString,
                    response_serializer=key__chain__pb2.ListKeyPairsResponse.SerializeToString,
            ),
            'CreateKeyPair': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKeyPair,
                    request_deserializer=key__chain__pb2.CreateKeyPairRequest.FromString,
                    response_serializer=key__chain__pb2.CreateKeyPairResponse.SerializeToString,
            ),
            'UpdateKeyPair': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKeyPair,
                    request_deserializer=key__chain__pb2.UpdateKeyPairRequest.FromString,
                    response_serializer=key__chain__pb2.UpdateKeyPairResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.KeyChainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pomerium.dashboard.KeyChainService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KeyChainService(object):
    """KeyChainService manages and store TLS Certificates, Keys and CAs, known as
    Key Pairs
    """

    @staticmethod
    def DeleteKeyPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.KeyChainService/DeleteKeyPair',
            key__chain__pb2.DeleteKeyPairRequest.SerializeToString,
            key__chain__pb2.DeleteKeyPairResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKeyPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.KeyChainService/GetKeyPair',
            key__chain__pb2.GetKeyPairRequest.SerializeToString,
            key__chain__pb2.GetKeyPairResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListKeyPairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.KeyChainService/ListKeyPairs',
            key__chain__pb2.ListKeyPairsRequest.SerializeToString,
            key__chain__pb2.ListKeyPairsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateKeyPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.KeyChainService/CreateKeyPair',
            key__chain__pb2.CreateKeyPairRequest.SerializeToString,
            key__chain__pb2.CreateKeyPairResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKeyPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.KeyChainService/UpdateKeyPair',
            key__chain__pb2.UpdateKeyPairRequest.SerializeToString,
            key__chain__pb2.UpdateKeyPairResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
