# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pomerium.pb.settings_pb2 as settings__pb2


class SettingsServiceStub(object):
    """SettingsService manages global pomerium settings
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSettings = channel.unary_unary(
                '/pomerium.dashboard.SettingsService/GetSettings',
                request_serializer=settings__pb2.GetSettingsRequest.SerializeToString,
                response_deserializer=settings__pb2.GetSettingsResponse.FromString,
                )
        self.SetSettings = channel.unary_unary(
                '/pomerium.dashboard.SettingsService/SetSettings',
                request_serializer=settings__pb2.SetSettingsRequest.SerializeToString,
                response_deserializer=settings__pb2.SetSettingsResponse.FromString,
                )


class SettingsServiceServicer(object):
    """SettingsService manages global pomerium settings
    """

    def GetSettings(self, request, context):
        """GetSettings retrieves the currently applied settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSettings(self, request, context):
        """SetSettings applies new global settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SettingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSettings,
                    request_deserializer=settings__pb2.GetSettingsRequest.FromString,
                    response_serializer=settings__pb2.GetSettingsResponse.SerializeToString,
            ),
            'SetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSettings,
                    request_deserializer=settings__pb2.SetSettingsRequest.FromString,
                    response_serializer=settings__pb2.SetSettingsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.SettingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SettingsService(object):
    """SettingsService manages global pomerium settings
    """

    @staticmethod
    def GetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.SettingsService/GetSettings',
            settings__pb2.GetSettingsRequest.SerializeToString,
            settings__pb2.GetSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pomerium.dashboard.SettingsService/SetSettings',
            settings__pb2.SetSettingsRequest.SerializeToString,
            settings__pb2.SetSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
