"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import clusters_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ClustersServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AddCluster: grpc.UnaryUnaryMultiCallable[
        clusters_pb2.AddClusterRequest,
        clusters_pb2.AddClusterResponse,
    ]

    DeleteCluster: grpc.UnaryUnaryMultiCallable[
        clusters_pb2.DeleteClusterRequest,
        clusters_pb2.DeleteClusterResponse,
    ]

    GetCluster: grpc.UnaryUnaryMultiCallable[
        clusters_pb2.GetClusterRequest,
        clusters_pb2.GetClusterResponse,
    ]

    ListClusters: grpc.UnaryUnaryMultiCallable[
        clusters_pb2.ListClustersRequest,
        clusters_pb2.ListClustersResponse,
    ]

    UpdateCluster: grpc.UnaryUnaryMultiCallable[
        clusters_pb2.UpdateClusterRequest,
        clusters_pb2.UpdateClusterResponse,
    ]

class ClustersServiceAsyncStub:
    AddCluster: grpc.aio.UnaryUnaryMultiCallable[
        clusters_pb2.AddClusterRequest,
        clusters_pb2.AddClusterResponse,
    ]

    DeleteCluster: grpc.aio.UnaryUnaryMultiCallable[
        clusters_pb2.DeleteClusterRequest,
        clusters_pb2.DeleteClusterResponse,
    ]

    GetCluster: grpc.aio.UnaryUnaryMultiCallable[
        clusters_pb2.GetClusterRequest,
        clusters_pb2.GetClusterResponse,
    ]

    ListClusters: grpc.aio.UnaryUnaryMultiCallable[
        clusters_pb2.ListClustersRequest,
        clusters_pb2.ListClustersResponse,
    ]

    UpdateCluster: grpc.aio.UnaryUnaryMultiCallable[
        clusters_pb2.UpdateClusterRequest,
        clusters_pb2.UpdateClusterResponse,
    ]

class ClustersServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def AddCluster(
        self,
        request: clusters_pb2.AddClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[clusters_pb2.AddClusterResponse, collections.abc.Awaitable[clusters_pb2.AddClusterResponse]]: ...

    @abc.abstractmethod
    def DeleteCluster(
        self,
        request: clusters_pb2.DeleteClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[clusters_pb2.DeleteClusterResponse, collections.abc.Awaitable[clusters_pb2.DeleteClusterResponse]]: ...

    @abc.abstractmethod
    def GetCluster(
        self,
        request: clusters_pb2.GetClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[clusters_pb2.GetClusterResponse, collections.abc.Awaitable[clusters_pb2.GetClusterResponse]]: ...

    @abc.abstractmethod
    def ListClusters(
        self,
        request: clusters_pb2.ListClustersRequest,
        context: _ServicerContext,
    ) -> typing.Union[clusters_pb2.ListClustersResponse, collections.abc.Awaitable[clusters_pb2.ListClustersResponse]]: ...

    @abc.abstractmethod
    def UpdateCluster(
        self,
        request: clusters_pb2.UpdateClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[clusters_pb2.UpdateClusterResponse, collections.abc.Awaitable[clusters_pb2.UpdateClusterResponse]]: ...

def add_ClustersServiceServicer_to_server(servicer: ClustersServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
