"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import tsdb_pb2

class TimeSeriesDBStub:
    """TimeSeriesDB is a generic service that is meant to be able to query for
    historical metrics and should provide a sufficient abstraction between the UI
    and underlying time series service, would it be Prometheus, embedded TSDB or
    other 3rd party provider
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetRouteMetricChange: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.RouteMetricChangeRequest,
        tsdb_pb2.Scalar,
    ]
    """returns metric change for a period of time"""
    GetRouteMetricChangeHistogram: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.RouteMetricChangeRequest,
        tsdb_pb2.ScalarBuckets,
    ]
    """returns buckets of values for a given metric"""
    GetRouteMetricSeries: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.RouteMetricSeriesRequest,
        tsdb_pb2.TimeSeriesResponse,
    ]
    """returns metric change as time series"""
    GetRouteMetricSeriesHistogram: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.RouteMetricSeriesHistogramRequest,
        tsdb_pb2.TimeSeriesResponse,
    ]
    """returns metric change as time series"""
    GetRouteMetricSeriesMulti: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.RouteMetricSeriesRequest,
        tsdb_pb2.TimeSeriesResponseMulti,
    ]
    """returns multiple annotated time series"""
    GetUptime: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.UptimeRequest,
        tsdb_pb2.UptimeResponse,
    ]
    """returns service uptime statistics"""
    GetInstances: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.GetInstancesRequest,
        tsdb_pb2.Instances,
    ]
    """returns list of system services with metrics"""
    GetServerMetricSeries: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.ServerMetricSeriesRequest,
        tsdb_pb2.TimeSeriesResponse,
    ]
    """returns server queries"""
    GetServerMetric: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.ServerMetricRequest,
        tsdb_pb2.Sample,
    ]
    """returns current metric value"""
    GetStatus: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.GetStatusRequest,
        tsdb_pb2.GetStatusResponse,
    ]
    """returns current status of scraping targets"""
    GetLastError: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.LastErrorRequest,
        tsdb_pb2.LastErrorResponse,
    ]
    """returns last known error for a metric, if available"""
    GetUsageReport: grpc.UnaryUnaryMultiCallable[
        tsdb_pb2.UsageReportRequest,
        tsdb_pb2.UsageReportResponse,
    ]
    """returns usage report"""

class TimeSeriesDBServicer(metaclass=abc.ABCMeta):
    """TimeSeriesDB is a generic service that is meant to be able to query for
    historical metrics and should provide a sufficient abstraction between the UI
    and underlying time series service, would it be Prometheus, embedded TSDB or
    other 3rd party provider
    """

    @abc.abstractmethod
    def GetRouteMetricChange(
        self,
        request: tsdb_pb2.RouteMetricChangeRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.Scalar:
        """returns metric change for a period of time"""
    @abc.abstractmethod
    def GetRouteMetricChangeHistogram(
        self,
        request: tsdb_pb2.RouteMetricChangeRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.ScalarBuckets:
        """returns buckets of values for a given metric"""
    @abc.abstractmethod
    def GetRouteMetricSeries(
        self,
        request: tsdb_pb2.RouteMetricSeriesRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.TimeSeriesResponse:
        """returns metric change as time series"""
    @abc.abstractmethod
    def GetRouteMetricSeriesHistogram(
        self,
        request: tsdb_pb2.RouteMetricSeriesHistogramRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.TimeSeriesResponse:
        """returns metric change as time series"""
    @abc.abstractmethod
    def GetRouteMetricSeriesMulti(
        self,
        request: tsdb_pb2.RouteMetricSeriesRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.TimeSeriesResponseMulti:
        """returns multiple annotated time series"""
    @abc.abstractmethod
    def GetUptime(
        self,
        request: tsdb_pb2.UptimeRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.UptimeResponse:
        """returns service uptime statistics"""
    @abc.abstractmethod
    def GetInstances(
        self,
        request: tsdb_pb2.GetInstancesRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.Instances:
        """returns list of system services with metrics"""
    @abc.abstractmethod
    def GetServerMetricSeries(
        self,
        request: tsdb_pb2.ServerMetricSeriesRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.TimeSeriesResponse:
        """returns server queries"""
    @abc.abstractmethod
    def GetServerMetric(
        self,
        request: tsdb_pb2.ServerMetricRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.Sample:
        """returns current metric value"""
    @abc.abstractmethod
    def GetStatus(
        self,
        request: tsdb_pb2.GetStatusRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.GetStatusResponse:
        """returns current status of scraping targets"""
    @abc.abstractmethod
    def GetLastError(
        self,
        request: tsdb_pb2.LastErrorRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.LastErrorResponse:
        """returns last known error for a metric, if available"""
    @abc.abstractmethod
    def GetUsageReport(
        self,
        request: tsdb_pb2.UsageReportRequest,
        context: grpc.ServicerContext,
    ) -> tsdb_pb2.UsageReportResponse:
        """returns usage report"""

def add_TimeSeriesDBServicer_to_server(servicer: TimeSeriesDBServicer, server: grpc.Server) -> None: ...
