# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pomerium.pb.policy_pb2 as policy__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in policy_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PolicyServiceStub(object):
    """PolicyService manages policy creation and definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeletePolicy = channel.unary_unary(
                '/pomerium.dashboard.PolicyService/DeletePolicy',
                request_serializer=policy__pb2.DeletePolicyRequest.SerializeToString,
                response_deserializer=policy__pb2.DeletePolicyResponse.FromString,
                _registered_method=True)
        self.GetPolicy = channel.unary_unary(
                '/pomerium.dashboard.PolicyService/GetPolicy',
                request_serializer=policy__pb2.GetPolicyRequest.SerializeToString,
                response_deserializer=policy__pb2.GetPolicyResponse.FromString,
                _registered_method=True)
        self.ListPolicies = channel.unary_unary(
                '/pomerium.dashboard.PolicyService/ListPolicies',
                request_serializer=policy__pb2.ListPoliciesRequest.SerializeToString,
                response_deserializer=policy__pb2.ListPoliciesResponse.FromString,
                _registered_method=True)
        self.SetPolicy = channel.unary_unary(
                '/pomerium.dashboard.PolicyService/SetPolicy',
                request_serializer=policy__pb2.SetPolicyRequest.SerializeToString,
                response_deserializer=policy__pb2.SetPolicyResponse.FromString,
                _registered_method=True)


class PolicyServiceServicer(object):
    """PolicyService manages policy creation and definition
    """

    def DeletePolicy(self, request, context):
        """DeletePolicy deletes an existing policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicy(self, request, context):
        """GetPolicy retrieves an existing policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPolicies(self, request, context):
        """ListPolicies lists existing policies based on the ListPoliciesRequest
        parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPolicy(self, request, context):
        """SetPolicy creates a new policy or, if the id is specified, updates an
        existing policy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PolicyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeletePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePolicy,
                    request_deserializer=policy__pb2.DeletePolicyRequest.FromString,
                    response_serializer=policy__pb2.DeletePolicyResponse.SerializeToString,
            ),
            'GetPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicy,
                    request_deserializer=policy__pb2.GetPolicyRequest.FromString,
                    response_serializer=policy__pb2.GetPolicyResponse.SerializeToString,
            ),
            'ListPolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPolicies,
                    request_deserializer=policy__pb2.ListPoliciesRequest.FromString,
                    response_serializer=policy__pb2.ListPoliciesResponse.SerializeToString,
            ),
            'SetPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPolicy,
                    request_deserializer=policy__pb2.SetPolicyRequest.FromString,
                    response_serializer=policy__pb2.SetPolicyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pomerium.dashboard.PolicyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pomerium.dashboard.PolicyService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PolicyService(object):
    """PolicyService manages policy creation and definition
    """

    @staticmethod
    def DeletePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PolicyService/DeletePolicy',
            policy__pb2.DeletePolicyRequest.SerializeToString,
            policy__pb2.DeletePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PolicyService/GetPolicy',
            policy__pb2.GetPolicyRequest.SerializeToString,
            policy__pb2.GetPolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PolicyService/ListPolicies',
            policy__pb2.ListPoliciesRequest.SerializeToString,
            policy__pb2.ListPoliciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pomerium.dashboard.PolicyService/SetPolicy',
            policy__pb2.SetPolicyRequest.SerializeToString,
            policy__pb2.SetPolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
