"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions
import xds.core.v3.context_params_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ResourceLocator(google.protobuf.message.Message):
    """xDS resource locators identify a xDS resource name and instruct the
    data-plane load balancer on how the resource may be located.

    Resource locators have a canonical xdstp:// URI representation:

      xdstp://{authority}/{type_url}/{id}?{context_params}{#directive,*}

    where context_params take the form of URI query parameters.

    Resource locators have a similar canonical http:// URI representation:

      http://{authority}/{type_url}/{id}?{context_params}{#directive,*}

    Resource locators also have a simplified file:// URI representation:

      file:///{id}{#directive,*}
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class Scheme(_Scheme, metaclass=_SchemeEnumTypeWrapper):
        pass
    class _Scheme:
        V = typing.NewType('V', builtins.int)
    class _SchemeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Scheme.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        XDSTP = ResourceLocator.Scheme.V(0)
        HTTP = ResourceLocator.Scheme.V(1)
        FILE = ResourceLocator.Scheme.V(2)

    XDSTP = ResourceLocator.Scheme.V(0)
    HTTP = ResourceLocator.Scheme.V(1)
    FILE = ResourceLocator.Scheme.V(2)

    class Directive(google.protobuf.message.Message):
        """Directives provide information to data-plane load balancers on how xDS
        resource names are to be interpreted and potentially further resolved. For
        example, they may provide alternative resource locators for when primary
        resolution fails. Directives are not part of resource names and do not
        appear in a xDS transport discovery request.

        When encoding to URIs, directives take the form:

        <directive name>=<string representation of directive value>

        For example, we can have alt=xdstp://foo/bar or entry=some%20thing. Each
        directive value type may have its own string encoding, in the case of
        ResourceLocator there is a recursive URI encoding.

        Percent encoding applies to the URI encoding of the directive value.
        Multiple directives are comma-separated, so the reserved characters that
        require percent encoding in a directive value are [',', '#', '[', ']',
        '%']. These are the RFC3986 fragment reserved characters with the addition
        of the xDS scheme specific ','. See
        https://tools.ietf.org/html/rfc3986#page-49 for further details on URI ABNF
        and reserved characters.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        ALT_FIELD_NUMBER: builtins.int
        ENTRY_FIELD_NUMBER: builtins.int
        @property
        def alt(self) -> global___ResourceLocator:
            """An alternative resource locator for fallback if the resource is
            unavailable. For example, take the resource locator:

              xdstp://foo/some-type/some-route-table#alt=xdstp://bar/some-type/another-route-table

            If the data-plane load balancer is unable to reach `foo` to fetch the
            resource, it will fallback to `bar`. Alternative resources do not need
            to have equivalent content, but they should be functional substitutes.
            """
            pass
        entry: typing.Text = ...
        """List collections support inlining of resources via the entry field in
        Resource. These inlined Resource objects may have an optional name
        field specified. When specified, the entry directive allows
        ResourceLocator to directly reference these inlined resources, e.g.
        xdstp://.../foo#entry=bar.
        """

        def __init__(self,
            *,
            alt : typing.Optional[global___ResourceLocator] = ...,
            entry : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"alt",b"alt",u"directive",b"directive",u"entry",b"entry"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"alt",b"alt",u"directive",b"directive",u"entry",b"entry"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal[u"directive",b"directive"]) -> typing.Optional[typing_extensions.Literal["alt","entry"]]: ...

    SCHEME_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    AUTHORITY_FIELD_NUMBER: builtins.int
    RESOURCE_TYPE_FIELD_NUMBER: builtins.int
    EXACT_CONTEXT_FIELD_NUMBER: builtins.int
    DIRECTIVES_FIELD_NUMBER: builtins.int
    scheme: global___ResourceLocator.Scheme.V = ...
    """URI scheme."""

    id: typing.Text = ...
    """Opaque identifier for the resource. Any '/' will not be escaped during URI
    encoding and will form part of the URI path. This may end
    with ‘*’ for glob collection references.
    """

    authority: typing.Text = ...
    """Logical authority for resource (not necessarily transport network address).
    Authorities are opaque in the xDS API, data-plane load balancers will map
    them to concrete network transports such as an xDS management server, e.g.
    via envoy.config.core.v3.ConfigSource.
    """

    resource_type: typing.Text = ...
    """Fully qualified resource type (as in type URL without types.googleapis.com/
    prefix).
    """

    @property
    def exact_context(self) -> xds.core.v3.context_params_pb2.ContextParams:
        """Additional parameters that can be used to select resource variants.
        Matches must be exact, i.e. all context parameters must match exactly and
        there must be no additional context parameters set on the matched
        resource.
        """
        pass
    @property
    def directives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ResourceLocator.Directive]:
        """A list of directives that appear in the xDS resource locator #fragment.

        When encoding to URI form, directives are percent encoded with comma
        separation.
        """
        pass
    def __init__(self,
        *,
        scheme : global___ResourceLocator.Scheme.V = ...,
        id : typing.Text = ...,
        authority : typing.Text = ...,
        resource_type : typing.Text = ...,
        exact_context : typing.Optional[xds.core.v3.context_params_pb2.ContextParams] = ...,
        directives : typing.Optional[typing.Iterable[global___ResourceLocator.Directive]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"context_param_specifier",b"context_param_specifier",u"exact_context",b"exact_context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"authority",b"authority",u"context_param_specifier",b"context_param_specifier",u"directives",b"directives",u"exact_context",b"exact_context",u"id",b"id",u"resource_type",b"resource_type",u"scheme",b"scheme"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"context_param_specifier",b"context_param_specifier"]) -> typing.Optional[typing_extensions.Literal["exact_context"]]: ...
global___ResourceLocator = ResourceLocator
