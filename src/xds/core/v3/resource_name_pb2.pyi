"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions
import xds.core.v3.context_params_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ResourceName(google.protobuf.message.Message):
    """xDS resource name. This has a canonical xdstp:// URI representation:

      xdstp://{authority}/{type_url}/{id}?{context_params}

    where context_params take the form of URI query parameters.

    A xDS resource name fully identifies a network resource for transport
    purposes. xDS resource names in this form appear only in discovery
    request/response messages used with the xDS transport.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ID_FIELD_NUMBER: builtins.int
    AUTHORITY_FIELD_NUMBER: builtins.int
    RESOURCE_TYPE_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    id: typing.Text = ...
    """Opaque identifier for the resource. Any '/' will not be escaped during URI
    encoding and will form part of the URI path.
    """

    authority: typing.Text = ...
    """Logical authority for resource (not necessarily transport network address).
    Authorities are opaque in the xDS API, data-plane load balancers will map
    them to concrete network transports such as an xDS management server.
    """

    resource_type: typing.Text = ...
    """Fully qualified resource type (as in type URL without types.googleapis.com/
    prefix).
    """

    @property
    def context(self) -> xds.core.v3.context_params_pb2.ContextParams:
        """Additional parameters that can be used to select resource variants."""
        pass
    def __init__(self,
        *,
        id : typing.Text = ...,
        authority : typing.Text = ...,
        resource_type : typing.Text = ...,
        context : typing.Optional[xds.core.v3.context_params_pb2.ContextParams] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"context",b"context"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"authority",b"authority",u"context",b"context",u"id",b"id",u"resource_type",b"resource_type"]) -> None: ...
global___ResourceName = ResourceName
