"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Int64Range(google.protobuf.message.Message):
    """[#protodoc-title: Range]

    Specifies the int64 start and end of the range using half-open interval semantics [start,
    end).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.int = ...
    """start of the range (inclusive)"""

    end: builtins.int = ...
    """end of the range (exclusive)"""

    def __init__(self,
        *,
        start : builtins.int = ...,
        end : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"end",b"end",u"start",b"start"]) -> None: ...
global___Int64Range = Int64Range

class Int32Range(google.protobuf.message.Message):
    """Specifies the int32 start and end of the range using half-open interval semantics [start,
    end).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.int = ...
    """start of the range (inclusive)"""

    end: builtins.int = ...
    """end of the range (exclusive)"""

    def __init__(self,
        *,
        start : builtins.int = ...,
        end : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"end",b"end",u"start",b"start"]) -> None: ...
global___Int32Range = Int32Range

class DoubleRange(google.protobuf.message.Message):
    """Specifies the double start and end of the range using half-open interval semantics [start,
    end).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    start: builtins.float = ...
    """start of the range (inclusive)"""

    end: builtins.float = ...
    """end of the range (exclusive)"""

    def __init__(self,
        *,
        start : builtins.float = ...,
        end : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"end",b"end",u"start",b"start"]) -> None: ...
global___DoubleRange = DoubleRange
