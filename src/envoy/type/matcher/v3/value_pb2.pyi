"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import envoy.type.matcher.v3.number_pb2
import envoy.type.matcher.v3.string_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class ValueMatcher(google.protobuf.message.Message):
    """[#protodoc-title: Value matcher]

    Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.
    StructValue is not supported and is always not matched.
    [#next-free-field: 7]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class NullMatch(google.protobuf.message.Message):
        """NullMatch is an empty message to specify a null value."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        def __init__(self,
            ) -> None: ...

    NULL_MATCH_FIELD_NUMBER: builtins.int
    DOUBLE_MATCH_FIELD_NUMBER: builtins.int
    STRING_MATCH_FIELD_NUMBER: builtins.int
    BOOL_MATCH_FIELD_NUMBER: builtins.int
    PRESENT_MATCH_FIELD_NUMBER: builtins.int
    LIST_MATCH_FIELD_NUMBER: builtins.int
    @property
    def null_match(self) -> global___ValueMatcher.NullMatch:
        """If specified, a match occurs if and only if the target value is a NullValue."""
        pass
    @property
    def double_match(self) -> envoy.type.matcher.v3.number_pb2.DoubleMatcher:
        """If specified, a match occurs if and only if the target value is a double value and is
        matched to this field.
        """
        pass
    @property
    def string_match(self) -> envoy.type.matcher.v3.string_pb2.StringMatcher:
        """If specified, a match occurs if and only if the target value is a string value and is
        matched to this field.
        """
        pass
    bool_match: builtins.bool = ...
    """If specified, a match occurs if and only if the target value is a bool value and is equal
    to this field.
    """

    present_match: builtins.bool = ...
    """If specified, value match will be performed based on whether the path is referring to a
    valid primitive value in the metadata. If the path is referring to a non-primitive value,
    the result is always not matched.
    """

    @property
    def list_match(self) -> global___ListMatcher:
        """If specified, a match occurs if and only if the target value is a list value and
        is matched to this field.
        """
        pass
    def __init__(self,
        *,
        null_match : typing.Optional[global___ValueMatcher.NullMatch] = ...,
        double_match : typing.Optional[envoy.type.matcher.v3.number_pb2.DoubleMatcher] = ...,
        string_match : typing.Optional[envoy.type.matcher.v3.string_pb2.StringMatcher] = ...,
        bool_match : builtins.bool = ...,
        present_match : builtins.bool = ...,
        list_match : typing.Optional[global___ListMatcher] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"bool_match",b"bool_match",u"double_match",b"double_match",u"list_match",b"list_match",u"match_pattern",b"match_pattern",u"null_match",b"null_match",u"present_match",b"present_match",u"string_match",b"string_match"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"bool_match",b"bool_match",u"double_match",b"double_match",u"list_match",b"list_match",u"match_pattern",b"match_pattern",u"null_match",b"null_match",u"present_match",b"present_match",u"string_match",b"string_match"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"match_pattern",b"match_pattern"]) -> typing.Optional[typing_extensions.Literal["null_match","double_match","string_match","bool_match","present_match","list_match"]]: ...
global___ValueMatcher = ValueMatcher

class ListMatcher(google.protobuf.message.Message):
    """Specifies the way to match a list value."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ONE_OF_FIELD_NUMBER: builtins.int
    @property
    def one_of(self) -> global___ValueMatcher:
        """If specified, at least one of the values in the list must match the value specified."""
        pass
    def __init__(self,
        *,
        one_of : typing.Optional[global___ValueMatcher] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"match_pattern",b"match_pattern",u"one_of",b"one_of"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"match_pattern",b"match_pattern",u"one_of",b"one_of"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"match_pattern",b"match_pattern"]) -> typing.Optional[typing_extensions.Literal["one_of"]]: ...
global___ListMatcher = ListMatcher
