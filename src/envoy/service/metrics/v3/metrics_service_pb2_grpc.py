# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from envoy.service.metrics.v3 import metrics_service_pb2 as envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2


class MetricsServiceStub(object):
    """[#protodoc-title: Metrics service]

    Service for streaming metrics to server that consumes the metrics data. It uses Prometheus metric
    data model as a standard to represent metrics information.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamMetrics = channel.stream_unary(
                '/envoy.service.metrics.v3.MetricsService/StreamMetrics',
                request_serializer=envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2.StreamMetricsMessage.SerializeToString,
                response_deserializer=envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2.StreamMetricsResponse.FromString,
                )


class MetricsServiceServicer(object):
    """[#protodoc-title: Metrics service]

    Service for streaming metrics to server that consumes the metrics data. It uses Prometheus metric
    data model as a standard to represent metrics information.
    """

    def StreamMetrics(self, request_iterator, context):
        """Envoy will connect and send StreamMetricsMessage messages forever. It does not expect any
        response to be sent as nothing would be done in the case of failure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamMetrics': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamMetrics,
                    request_deserializer=envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2.StreamMetricsMessage.FromString,
                    response_serializer=envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2.StreamMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'envoy.service.metrics.v3.MetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetricsService(object):
    """[#protodoc-title: Metrics service]

    Service for streaming metrics to server that consumes the metrics data. It uses Prometheus metric
    data model as a standard to represent metrics information.
    """

    @staticmethod
    def StreamMetrics(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/envoy.service.metrics.v3.MetricsService/StreamMetrics',
            envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2.StreamMetricsMessage.SerializeToString,
            envoy_dot_service_dot_metrics_dot_v3_dot_metrics__service__pb2.StreamMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
