"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import envoy.config.core.v3.base_pb2
import envoy.config.core.v3.extension_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SubstitutionFormatString(google.protobuf.message.Message):
    """[#protodoc-title: Substitution format string]

    Configuration to use multiple :ref:`command operators <config_access_log_command_operators>`
    to generate a new string in either plain text or JSON format.
    [#next-free-field: 7]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TEXT_FORMAT_FIELD_NUMBER: builtins.int
    JSON_FORMAT_FIELD_NUMBER: builtins.int
    TEXT_FORMAT_SOURCE_FIELD_NUMBER: builtins.int
    OMIT_EMPTY_VALUES_FIELD_NUMBER: builtins.int
    CONTENT_TYPE_FIELD_NUMBER: builtins.int
    FORMATTERS_FIELD_NUMBER: builtins.int
    text_format: typing.Text = ...
    """Specify a format with command operators to form a text string.
    Its details is described in :ref:`format string<config_access_log_format_strings>`.

    For example, setting ``text_format`` like below,

    .. validated-code-block:: yaml
      :type-name: envoy.config.core.v3.SubstitutionFormatString

      text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"

    generates plain text similar to:

    .. code-block:: text

      upstream connect error:503:path=/foo

    Deprecated in favor of :ref:`text_format_source <envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source>`. To migrate text format strings, use the :ref:`inline_string <envoy_v3_api_field_config.core.v3.DataSource.inline_string>` field.
    """

    @property
    def json_format(self) -> google.protobuf.struct_pb2.Struct:
        """Specify a format with command operators to form a JSON string.
        Its details is described in :ref:`format dictionary<config_access_log_format_dictionaries>`.
        Values are rendered as strings, numbers, or boolean values as appropriate.
        Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
        See the documentation for a specific command operator for details.

        .. validated-code-block:: yaml
          :type-name: envoy.config.core.v3.SubstitutionFormatString

          json_format:
            status: "%RESPONSE_CODE%"
            message: "%LOCAL_REPLY_BODY%"

        The following JSON object would be created:

        .. code-block:: json

         {
           "status": 500,
           "message": "My error message"
         }
        """
        pass
    @property
    def text_format_source(self) -> envoy.config.core.v3.base_pb2.DataSource:
        """Specify a format with command operators to form a text string.
        Its details is described in :ref:`format string<config_access_log_format_strings>`.

        For example, setting ``text_format`` like below,

        .. validated-code-block:: yaml
          :type-name: envoy.config.core.v3.SubstitutionFormatString

          text_format_source:
            inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"

        generates plain text similar to:

        .. code-block:: text

          upstream connect error:503:path=/foo
        """
        pass
    omit_empty_values: builtins.bool = ...
    """If set to true, when command operators are evaluated to null,

    * for ``text_format``, the output of the empty operator is changed from ``-`` to an
      empty string, so that empty values are omitted entirely.
    * for ``json_format`` the keys with null values are omitted in the output structure.
    """

    content_type: typing.Text = ...
    """Specify a *content_type* field.
    If this field is not set then ``text/plain`` is used for *text_format* and
    ``application/json`` is used for *json_format*.

    .. validated-code-block:: yaml
      :type-name: envoy.config.core.v3.SubstitutionFormatString

      content_type: "text/html; charset=UTF-8"
    """

    @property
    def formatters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[envoy.config.core.v3.extension_pb2.TypedExtensionConfig]:
        """Specifies a collection of Formatter plugins that can be called from the access log configuration.
        See the formatters extensions documentation for details.
        [#extension-category: envoy.formatter]
        """
        pass
    def __init__(self,
        *,
        text_format : typing.Text = ...,
        json_format : typing.Optional[google.protobuf.struct_pb2.Struct] = ...,
        text_format_source : typing.Optional[envoy.config.core.v3.base_pb2.DataSource] = ...,
        omit_empty_values : builtins.bool = ...,
        content_type : typing.Text = ...,
        formatters : typing.Optional[typing.Iterable[envoy.config.core.v3.extension_pb2.TypedExtensionConfig]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"format",b"format",u"json_format",b"json_format",u"text_format",b"text_format",u"text_format_source",b"text_format_source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"content_type",b"content_type",u"format",b"format",u"formatters",b"formatters",u"json_format",b"json_format",u"omit_empty_values",b"omit_empty_values",u"text_format",b"text_format",u"text_format_source",b"text_format_source"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"format",b"format"]) -> typing.Optional[typing_extensions.Literal["text_format","json_format","text_format_source"]]: ...
global___SubstitutionFormatString = SubstitutionFormatString
