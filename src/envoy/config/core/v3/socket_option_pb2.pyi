"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SocketOption(google.protobuf.message.Message):
    """[#protodoc-title: Socket Option ]

    Generic socket option message. This would be used to set socket options that
    might not exist in upstream kernels or precompiled Envoy binaries.
    [#next-free-field: 7]
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class SocketState(_SocketState, metaclass=_SocketStateEnumTypeWrapper):
        pass
    class _SocketState:
        V = typing.NewType('V', builtins.int)
    class _SocketStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SocketState.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        STATE_PREBIND = SocketOption.SocketState.V(0)
        """Socket options are applied after socket creation but before binding the socket to a port"""

        STATE_BOUND = SocketOption.SocketState.V(1)
        """Socket options are applied after binding the socket to a port but before calling listen()"""

        STATE_LISTENING = SocketOption.SocketState.V(2)
        """Socket options are applied after calling listen()"""


    STATE_PREBIND = SocketOption.SocketState.V(0)
    """Socket options are applied after socket creation but before binding the socket to a port"""

    STATE_BOUND = SocketOption.SocketState.V(1)
    """Socket options are applied after binding the socket to a port but before calling listen()"""

    STATE_LISTENING = SocketOption.SocketState.V(2)
    """Socket options are applied after calling listen()"""


    DESCRIPTION_FIELD_NUMBER: builtins.int
    LEVEL_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    INT_VALUE_FIELD_NUMBER: builtins.int
    BUF_VALUE_FIELD_NUMBER: builtins.int
    STATE_FIELD_NUMBER: builtins.int
    description: typing.Text = ...
    """An optional name to give this socket option for debugging, etc.
    Uniqueness is not required and no special meaning is assumed.
    """

    level: builtins.int = ...
    """Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP"""

    name: builtins.int = ...
    """The numeric name as passed to setsockopt"""

    int_value: builtins.int = ...
    """Because many sockopts take an int value."""

    buf_value: builtins.bytes = ...
    """Otherwise it's a byte buffer."""

    state: global___SocketOption.SocketState.V = ...
    """The state in which the option will be applied. When used in BindConfig
    STATE_PREBIND is currently the only valid value.
    """

    def __init__(self,
        *,
        description : typing.Text = ...,
        level : builtins.int = ...,
        name : builtins.int = ...,
        int_value : builtins.int = ...,
        buf_value : builtins.bytes = ...,
        state : global___SocketOption.SocketState.V = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"buf_value",b"buf_value",u"int_value",b"int_value",u"value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"buf_value",b"buf_value",u"description",b"description",u"int_value",b"int_value",u"level",b"level",u"name",b"name",u"state",b"state",u"value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"value",b"value"]) -> typing.Optional[typing_extensions.Literal["int_value","buf_value"]]: ...
global___SocketOption = SocketOption
