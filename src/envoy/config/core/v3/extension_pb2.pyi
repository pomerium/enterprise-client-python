"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import envoy.config.core.v3.config_source_pb2
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class TypedExtensionConfig(google.protobuf.message.Message):
    """[#protodoc-title: Extension configuration]

    Message type for extension configuration.
    [#next-major-version: revisit all existing typed_config that doesn't use this wrapper.].
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    NAME_FIELD_NUMBER: builtins.int
    TYPED_CONFIG_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """The name of an extension. This is not used to select the extension, instead
    it serves the role of an opaque identifier.
    """

    @property
    def typed_config(self) -> google.protobuf.any_pb2.Any:
        """The typed config for the extension. The type URL will be used to identify
        the extension. In the case that the type URL is *udpa.type.v1.TypedStruct*,
        the inner type URL of *TypedStruct* will be utilized. See the
        :ref:`extension configuration overview
        <config_overview_extension_configuration>` for further details.
        """
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        typed_config : typing.Optional[google.protobuf.any_pb2.Any] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"typed_config",b"typed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"name",b"name",u"typed_config",b"typed_config"]) -> None: ...
global___TypedExtensionConfig = TypedExtensionConfig

class ExtensionConfigSource(google.protobuf.message.Message):
    """Configuration source specifier for a late-bound extension configuration. The
    parent resource is warmed until all the initial extension configurations are
    received, unless the flag to apply the default configuration is set.
    Subsequent extension updates are atomic on a per-worker basis. Once an
    extension configuration is applied to a request or a connection, it remains
    constant for the duration of processing. If the initial delivery of the
    extension configuration fails, due to a timeout for example, the optional
    default configuration is applied. Without a default configuration, the
    extension is disabled, until an extension configuration is received. The
    behavior of a disabled extension depends on the context. For example, a
    filter chain with a disabled extension filter rejects all incoming streams.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONFIG_SOURCE_FIELD_NUMBER: builtins.int
    DEFAULT_CONFIG_FIELD_NUMBER: builtins.int
    APPLY_DEFAULT_CONFIG_WITHOUT_WARMING_FIELD_NUMBER: builtins.int
    TYPE_URLS_FIELD_NUMBER: builtins.int
    @property
    def config_source(self) -> envoy.config.core.v3.config_source_pb2.ConfigSource: ...
    @property
    def default_config(self) -> google.protobuf.any_pb2.Any:
        """Optional default configuration to use as the initial configuration if
        there is a failure to receive the initial extension configuration or if
        `apply_default_config_without_warming` flag is set.
        """
        pass
    apply_default_config_without_warming: builtins.bool = ...
    """Use the default config as the initial configuration without warming and
    waiting for the first discovery response. Requires the default configuration
    to be supplied.
    """

    @property
    def type_urls(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A set of permitted extension type URLs. Extension configuration updates are rejected
        if they do not match any type URL in the set.
        """
        pass
    def __init__(self,
        *,
        config_source : typing.Optional[envoy.config.core.v3.config_source_pb2.ConfigSource] = ...,
        default_config : typing.Optional[google.protobuf.any_pb2.Any] = ...,
        apply_default_config_without_warming : builtins.bool = ...,
        type_urls : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"config_source",b"config_source",u"default_config",b"default_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"apply_default_config_without_warming",b"apply_default_config_without_warming",u"config_source",b"config_source",u"default_config",b"default_config",u"type_urls",b"type_urls"]) -> None: ...
global___ExtensionConfigSource = ExtensionConfigSource
